---
title: "Getting Started with R and the tidyverse"
subtitle: "Code Club of Houlahan Lab, Han Lab, and Koenig Lab"
format: 
    revealjs: 
        theme: default # simple
        # embed-resources: true # chalkboard cannot work with embed-resources
        slide-number: true
        chalkboard: true
        transition: fade
---


```{r setup, include=FALSE}
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```


## Common datatypes in R

- **Vector**: A sequence of data elements of the same basic type. Can be `numeric`, `character`, or `logical`.
- **Matrix**: A 2-dimensional array where each element is of the same type.
- **List**: An ordered collection of objects. Lists can contain different types of data.
- **Data frame**: A table or 2-dimensional array-like structure where each column can contain different types of data (numeric, character, etc.).

## Vectors

::::: {.columns}

:::: {.column width="60%"}
- is a sequence of data elements of the same basic type. 
- can be connected using the `c()`

::: {.fragment .fade-in}
```{r}
is.vector(1) # even if a single number
```
:::

::: {.fragment .fade-in}
```{r}
1:5 # numbers are double unless using `L` 5L
```
:::

::: {.fragment .fade-in}
```{r}
c("apple", "banana", "cherry")
```
:::

::: {.fragment .fade-in}
```{r}
1:5 > 3
```
:::
::::

:::: {.column width="40%"}
![*Advanced R* Chapter 3 Vector](https://adv-r.hadley.nz/diagrams/vectors/summary-tree-s3-1.png)
::::

:::::

## Subsetting Vectors

index is 1-based

```{r}
x <- seq(2, 10, by = 2) # 2, 4, 6, 8, 10
x
```

::: {.fragment .fade-in}
```{r}
x[1] # first element
```
:::

::: {.fragment .fade-in style="font-size:0.8em"}
Remember vector is the very basic data in R. We actually use vector to subset.
:::

::: {.fragment .fade-in}
```{r}
x[2:4] # second to fourth elements
```
:::

::: {.fragment .fade-in}
```{r}
# x > 5  # FALSE FALSE TRUE TRUE TRUE
x[x > 5] # elements greater than 5
```
:::

## List

:::: {.columns}
::: {.column width="70%"} 

- is an ordered collection of objects.
- can contain **different types** of data.
- Created using `list()`
- Data frame is a special type of list.
:::

::: {.column width="30%"}
![](https://adv-r.hadley.nz/diagrams/vectors/summary-tree-s3-2.png)
:::
::::

:::: {.columns}
::: {.column width="70%"}
```{r}
cell_markers <- list( 
  type1 = c("gene10", "gene40"),
  type2 = c("gene30", "gene50"),
  type3 = c("gene20", "gene60")
)
```
:::

::: {.column width="30%"}

```{r}
#| echo: false
cell_markers
```
:::
::::

## Subsetting List

::::: {.columns}
:::: {.column width="70%"}
- `[<index>]` or `["<name>"]` to sublist.
- `$<name>`, `[["<name>"]]` or `[[index]]` to access a element.

::: {.fragment .fade-in style="padding-bottom: 0.5em"}
```{.r}
cell_markers[c(1,3)] # return a sublist
cell_markers[c("type1", "type3")]
```
```{r}
#| echo: false
cell_markers[c("type1", "type3")]
```
:::

::: {.fragment .fade-in}
```{.r}
cell_markers$type1 # return a vector
cell_markers[["type1"]]
cell_markers[[1]]
```
```{r}
#| echo: false
cell_markers$type1
```
:::
::::

:::: {.column width="30%"}
```{r}
cell_markers
```
::::
:::::

## Data Frames/Tibble

::: {.incremental}
- A data frame is a table where each column can contain different types of data (numeric, character, etc.).
- Can be created using `data.frame()`, `read.csv()`, ...
- Data frame is actually a list of vectors of the same length.
:::

::::{.columns .fragment .fade-in}

::: {.column width="60%"}
```{r}
df <- tibble(
  gene = c("gene1", "gene2", "gene3"),
  control = c(10, 5, 7),
  treatment = c(14, 4, 8)
)
df <- column_to_rownames(df, "gene")
c(is.list(df), is.data.frame(df))
```
:::

::: {.column width="40%"}
```{r}
#| echo: false
df
```
:::

::::

---

## Retrive Column from data frame

Remember the list? Data frame is a special type of list.

::: {.fragment .fade-in}
- `$<name>`, `[["<name>"]]` or `[[<index>]]` to access a column.
```{r}
df
```
:::

::: {.fragment .fade-in}
How to access the `control` column?
:::

::: {.fragment .fade-in}
```{.r}
df[["control"]]
df[[1]]
df$control
```
:::

## Subsetting Data Frame {.smaller}

- `df[<column>]` to subset by column.
- `df[<row>, <column>]` to subset or access a cell.

::::: {.columns}
:::: {.column width="50%"}
```{r}
df[, "control"]
df["control"]
```
::: {.fragment .fade-in}
```{r}

```
:::
::::
:::: {.column width="50%"}

::: {.fragment .fade-in}
Leave it blank to access all.

:::
::::
:::::

## Tidyverse: a collection of R packages

:::: {.columns}

::: {.column width="70%"}

- **tibble**: A modern take on data frames
- **dplyr**: Data manipulation
- **readr**: Data IO
- **tidyr**: Data tidying
- ~~**stringr**: String manipulation~~
- ~~**ggplot2**: Data visualization~~
- ~~**purrr**: Functional programming~~

:::

::: {.column width="30%"}

![](https://tidyverse.tidyverse.org/logo.png)

[Posit Cheatsheets](https://posit.co/resources/cheatsheets/)

:::

::::

## Readr: File Input/Output

- `read_csv()`: Read a CSV file into a data frame.
  - local file or URL
  - `read_tsv()`: tab-separated; `read_csv2()`: semi-colon separated
- `write_csv()`: Write a data frame to a CSV file.

Other packages: `readxl` (Excel), `googleSheets4`

```{.r}
read_tsv("experiment1_wilcox_results.tsv")

exp1_wilcox <- read_csv("https://raw.githubusercontent.com/Justype/coding_club/refs/heads/main/resources/mock_gene_expression/experiment1_wilcox_results.csv")
```

```{r}
#| echo: false
exp1_wilcox <- read_csv("https://raw.githubusercontent.com/Justype/coding_club/refs/heads/main/resources/mock_gene_expression/experiment1_wilcox_results.csv")
```

# Thank you!
